import type { CreateGroundTruthDto } from '@agentdb9/shared';

export const BACKEND_SUITE: CreateGroundTruthDto[] = [
  {
    category: 'backend',
    taskType: 'REST API Endpoint',
    taskDescription: 'Create a REST API endpoint for user registration that accepts email and password, validates input, hashes the password, and stores the user in a database. Include proper error handling and return appropriate HTTP status codes.',
    expectedOutput: {
      code: 'Complete endpoint implementation with validation, password hashing, error handling',
      features: ['Input validation', 'Password hashing', 'Database storage', 'Error responses'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.25,
      completeness: 0.2,
      efficiency: 0.1,
      maintainability: 0.1,
      security: 0.05,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'NestJS',
      difficulty: 'medium',
      estimatedTime: 300,
      tags: ['api', 'authentication', 'security'],
    },
  },
  {
    category: 'backend',
    taskType: 'Database Query Optimization',
    taskDescription: 'Optimize a slow database query that fetches users with their related posts and comments. The current query uses N+1 pattern. Rewrite it using proper joins or eager loading to reduce database calls.',
    expectedOutput: {
      code: 'Optimized query with joins/eager loading',
      explanation: 'Performance improvement analysis',
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.2,
      completeness: 0.15,
      efficiency: 0.3,
      maintainability: 0.1,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'TypeORM',
      difficulty: 'hard',
      estimatedTime: 240,
      tags: ['database', 'optimization', 'performance'],
    },
  },
  {
    category: 'backend',
    taskType: 'JWT Authentication Middleware',
    taskDescription: 'Implement a JWT authentication middleware that verifies tokens, extracts user information, and attaches it to the request object. Handle expired tokens and invalid signatures appropriately.',
    expectedOutput: {
      code: 'Complete middleware with token verification',
      features: ['Token validation', 'User extraction', 'Error handling'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.2,
      completeness: 0.2,
      efficiency: 0.1,
      maintainability: 0.1,
      security: 0.1,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'Express/NestJS',
      difficulty: 'medium',
      estimatedTime: 180,
      tags: ['authentication', 'middleware', 'security'],
    },
  },
  {
    category: 'backend',
    taskType: 'WebSocket Event Handler',
    taskDescription: 'Create a WebSocket event handler for a real-time chat application. Handle connection, disconnection, message broadcasting, and room management. Include error handling and connection validation.',
    expectedOutput: {
      code: 'Complete WebSocket handler with events',
      features: ['Connection management', 'Message broadcasting', 'Room support'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.25,
      completeness: 0.25,
      efficiency: 0.1,
      maintainability: 0.1,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'Socket.io',
      difficulty: 'hard',
      estimatedTime: 360,
      tags: ['websocket', 'realtime', 'chat'],
    },
  },
  {
    category: 'backend',
    taskType: 'Data Validation Service',
    taskDescription: 'Create a service that validates complex nested data structures using class-validator. Include custom validators for email format, password strength, and date ranges. Provide clear error messages.',
    expectedOutput: {
      code: 'Validation service with custom validators',
      features: ['Nested validation', 'Custom validators', 'Error messages'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.25,
      completeness: 0.2,
      efficiency: 0.1,
      maintainability: 0.15,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'class-validator',
      difficulty: 'medium',
      estimatedTime: 240,
      tags: ['validation', 'data', 'error-handling'],
    },
  },
  {
    category: 'backend',
    taskType: 'Caching Layer Implementation',
    taskDescription: 'Implement a caching layer using Redis for frequently accessed data. Include cache invalidation strategies, TTL management, and fallback to database when cache misses.',
    expectedOutput: {
      code: 'Complete caching service with Redis',
      features: ['Cache get/set', 'TTL management', 'Invalidation', 'Fallback'],
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.2,
      completeness: 0.2,
      efficiency: 0.25,
      maintainability: 0.1,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'Redis',
      difficulty: 'medium',
      estimatedTime: 300,
      tags: ['caching', 'redis', 'performance'],
    },
  },
  {
    category: 'backend',
    taskType: 'Rate Limiting Middleware',
    taskDescription: 'Create a rate limiting middleware that restricts API requests per user/IP. Support different limits for different endpoints and provide clear error messages when limits are exceeded.',
    expectedOutput: {
      code: 'Rate limiting middleware',
      features: ['Request counting', 'Limit enforcement', 'Custom limits', 'Error responses'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.2,
      completeness: 0.2,
      efficiency: 0.15,
      maintainability: 0.1,
      security: 0.05,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'Express',
      difficulty: 'medium',
      estimatedTime: 240,
      tags: ['rate-limiting', 'security', 'middleware'],
    },
  },
  {
    category: 'backend',
    taskType: 'File Upload Handler',
    taskDescription: 'Implement a file upload handler that validates file types, limits file size, generates unique filenames, and stores files securely. Include progress tracking and error handling.',
    expectedOutput: {
      code: 'Complete file upload handler',
      features: ['Type validation', 'Size limits', 'Secure storage', 'Progress tracking'],
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.2,
      completeness: 0.25,
      efficiency: 0.1,
      maintainability: 0.1,
      security: 0.1,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'Multer',
      difficulty: 'medium',
      estimatedTime: 300,
      tags: ['file-upload', 'storage', 'security'],
    },
  },
  {
    category: 'backend',
    taskType: 'Background Job Queue',
    taskDescription: 'Set up a background job queue for processing emails, image resizing, and data exports. Include job retry logic, failure handling, and progress monitoring.',
    expectedOutput: {
      code: 'Job queue setup with workers',
      features: ['Job creation', 'Worker processing', 'Retry logic', 'Monitoring'],
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.2,
      completeness: 0.25,
      efficiency: 0.15,
      maintainability: 0.15,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'Bull',
      difficulty: 'hard',
      estimatedTime: 420,
      tags: ['queue', 'background-jobs', 'async'],
    },
  },
  {
    category: 'backend',
    taskType: 'API Documentation',
    taskDescription: 'Generate comprehensive API documentation using Swagger/OpenAPI. Include request/response schemas, authentication requirements, and example requests for all endpoints.',
    expectedOutput: {
      code: 'Swagger configuration and decorators',
      features: ['Schema definitions', 'Auth documentation', 'Examples'],
    },
    evaluationCriteria: {
      accuracy: 0.2,
      codeQuality: 0.2,
      completeness: 0.3,
      efficiency: 0.05,
      maintainability: 0.25,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'Swagger',
      difficulty: 'easy',
      estimatedTime: 180,
      tags: ['documentation', 'api', 'swagger'],
    },
  },
];

export const FRONTEND_SUITE: CreateGroundTruthDto[] = [
  {
    category: 'frontend',
    taskType: 'Form Component with Validation',
    taskDescription: 'Create a reusable form component with real-time validation, error messages, and submission handling. Support text inputs, email, password, and checkbox fields. Include loading states.',
    expectedOutput: {
      code: 'Complete form component with validation',
      features: ['Real-time validation', 'Error display', 'Loading states', 'Accessibility'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.25,
      completeness: 0.2,
      efficiency: 0.1,
      maintainability: 0.15,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'React',
      difficulty: 'medium',
      estimatedTime: 300,
      tags: ['forms', 'validation', 'components'],
    },
  },
  {
    category: 'frontend',
    taskType: 'Data Table with Sorting and Filtering',
    taskDescription: 'Build a data table component that displays paginated data with column sorting, filtering, and search functionality. Include loading and empty states.',
    expectedOutput: {
      code: 'Complete data table component',
      features: ['Sorting', 'Filtering', 'Pagination', 'Search', 'States'],
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.25,
      completeness: 0.25,
      efficiency: 0.15,
      maintainability: 0.1,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'React',
      difficulty: 'hard',
      estimatedTime: 420,
      tags: ['table', 'data-display', 'components'],
    },
  },
  {
    category: 'frontend',
    taskType: 'Modal Dialog Component',
    taskDescription: 'Create a reusable modal dialog component with animations, backdrop click handling, keyboard navigation (ESC to close), and focus management. Support different sizes and custom content.',
    expectedOutput: {
      code: 'Complete modal component',
      features: ['Animations', 'Keyboard support', 'Focus trap', 'Customizable'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.25,
      completeness: 0.2,
      efficiency: 0.1,
      maintainability: 0.15,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'React',
      difficulty: 'medium',
      estimatedTime: 240,
      tags: ['modal', 'dialog', 'accessibility'],
    },
  },
  {
    category: 'frontend',
    taskType: 'State Management Setup',
    taskDescription: 'Set up global state management for user authentication, including login/logout actions, token storage, and automatic token refresh. Include TypeScript types.',
    expectedOutput: {
      code: 'State management setup',
      features: ['Auth state', 'Actions', 'Token management', 'Types'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.25,
      completeness: 0.2,
      efficiency: 0.1,
      maintainability: 0.15,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'Zustand/Redux',
      difficulty: 'medium',
      estimatedTime: 300,
      tags: ['state-management', 'authentication'],
    },
  },
  {
    category: 'frontend',
    taskType: 'Responsive Navigation',
    taskDescription: 'Build a responsive navigation component that works on mobile and desktop. Include hamburger menu for mobile, dropdown menus, and active link highlighting.',
    expectedOutput: {
      code: 'Responsive navigation component',
      features: ['Mobile menu', 'Dropdowns', 'Active states', 'Responsive'],
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.25,
      completeness: 0.25,
      efficiency: 0.1,
      maintainability: 0.15,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'React',
      difficulty: 'medium',
      estimatedTime: 300,
      tags: ['navigation', 'responsive', 'mobile'],
    },
  },
  {
    category: 'frontend',
    taskType: 'Custom Hook for API Calls',
    taskDescription: 'Create a custom React hook for making API calls with loading states, error handling, and automatic retries. Support GET, POST, PUT, DELETE methods.',
    expectedOutput: {
      code: 'Custom hook implementation',
      features: ['Loading states', 'Error handling', 'Retries', 'Multiple methods'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.25,
      completeness: 0.2,
      efficiency: 0.15,
      maintainability: 0.1,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'React',
      difficulty: 'medium',
      estimatedTime: 240,
      tags: ['hooks', 'api', 'data-fetching'],
    },
  },
  {
    category: 'frontend',
    taskType: 'Infinite Scroll Component',
    taskDescription: 'Implement an infinite scroll component that loads more data as the user scrolls. Include loading indicators, error handling, and "end of list" detection.',
    expectedOutput: {
      code: 'Infinite scroll implementation',
      features: ['Scroll detection', 'Data loading', 'Loading states', 'End detection'],
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.2,
      completeness: 0.2,
      efficiency: 0.25,
      maintainability: 0.1,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'React',
      difficulty: 'hard',
      estimatedTime: 360,
      tags: ['scroll', 'pagination', 'performance'],
    },
  },
  {
    category: 'frontend',
    taskType: 'Toast Notification System',
    taskDescription: 'Build a toast notification system that displays success, error, warning, and info messages. Support auto-dismiss, manual dismiss, and stacking multiple toasts.',
    expectedOutput: {
      code: 'Toast notification system',
      features: ['Multiple types', 'Auto-dismiss', 'Stacking', 'Animations'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.25,
      completeness: 0.2,
      efficiency: 0.1,
      maintainability: 0.15,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'React',
      difficulty: 'medium',
      estimatedTime: 240,
      tags: ['notifications', 'toast', 'ui'],
    },
  },
  {
    category: 'frontend',
    taskType: 'Dark Mode Toggle',
    taskDescription: 'Implement a dark mode toggle that switches between light and dark themes. Persist user preference in localStorage and apply theme on initial load. Include smooth transitions.',
    expectedOutput: {
      code: 'Dark mode implementation',
      features: ['Theme toggle', 'Persistence', 'Smooth transitions', 'System preference'],
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.2,
      completeness: 0.25,
      efficiency: 0.15,
      maintainability: 0.15,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'React',
      difficulty: 'easy',
      estimatedTime: 180,
      tags: ['theme', 'dark-mode', 'ui'],
    },
  },
  {
    category: 'frontend',
    taskType: 'File Upload with Preview',
    taskDescription: 'Create a file upload component with drag-and-drop support, image preview, progress bar, and file validation (type and size). Support multiple files.',
    expectedOutput: {
      code: 'File upload component',
      features: ['Drag-drop', 'Preview', 'Progress', 'Validation', 'Multiple files'],
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.25,
      completeness: 0.25,
      efficiency: 0.1,
      maintainability: 0.15,
    },
    metadata: {
      language: 'TypeScript',
      framework: 'React',
      difficulty: 'hard',
      estimatedTime: 360,
      tags: ['file-upload', 'drag-drop', 'preview'],
    },
  },
];

export const DEVOPS_SUITE: CreateGroundTruthDto[] = [
  {
    category: 'devops',
    taskType: 'Multi-stage Dockerfile',
    taskDescription: 'Create a multi-stage Dockerfile for a Node.js application that optimizes image size, includes security best practices, and supports both development and production builds.',
    expectedOutput: {
      code: 'Multi-stage Dockerfile',
      features: ['Build stages', 'Size optimization', 'Security', 'Dev/prod support'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.2,
      completeness: 0.2,
      efficiency: 0.2,
      maintainability: 0.1,
    },
    metadata: {
      language: 'Dockerfile',
      framework: 'Docker',
      difficulty: 'medium',
      estimatedTime: 240,
      tags: ['docker', 'containerization', 'optimization'],
    },
  },
  {
    category: 'devops',
    taskType: 'Docker Compose Setup',
    taskDescription: 'Create a docker-compose.yml file for a full-stack application with frontend, backend, database, and Redis. Include health checks, volume mounts, and environment variables.',
    expectedOutput: {
      code: 'Complete docker-compose.yml',
      features: ['Multiple services', 'Health checks', 'Volumes', 'Networks'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.25,
      completeness: 0.25,
      efficiency: 0.1,
      maintainability: 0.1,
    },
    metadata: {
      language: 'YAML',
      framework: 'Docker Compose',
      difficulty: 'medium',
      estimatedTime: 300,
      tags: ['docker-compose', 'orchestration'],
    },
  },
  {
    category: 'devops',
    taskType: 'CI/CD Pipeline',
    taskDescription: 'Set up a GitHub Actions workflow that runs tests, builds Docker images, and deploys to production on merge to main. Include environment-specific configurations.',
    expectedOutput: {
      code: 'GitHub Actions workflow',
      features: ['Testing', 'Building', 'Deployment', 'Environments'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.2,
      completeness: 0.25,
      efficiency: 0.15,
      maintainability: 0.1,
    },
    metadata: {
      language: 'YAML',
      framework: 'GitHub Actions',
      difficulty: 'hard',
      estimatedTime: 420,
      tags: ['ci-cd', 'automation', 'deployment'],
    },
  },
  {
    category: 'devops',
    taskType: 'Nginx Configuration',
    taskDescription: 'Configure Nginx as a reverse proxy for a Node.js application with SSL termination, rate limiting, caching, and load balancing across multiple instances.',
    expectedOutput: {
      code: 'Nginx configuration',
      features: ['Reverse proxy', 'SSL', 'Rate limiting', 'Caching', 'Load balancing'],
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.2,
      completeness: 0.25,
      efficiency: 0.2,
      maintainability: 0.1,
    },
    metadata: {
      language: 'Nginx Config',
      framework: 'Nginx',
      difficulty: 'hard',
      estimatedTime: 360,
      tags: ['nginx', 'proxy', 'ssl'],
    },
  },
  {
    category: 'devops',
    taskType: 'Kubernetes Deployment',
    taskDescription: 'Create Kubernetes manifests for deploying a web application with deployment, service, ingress, and configmap. Include resource limits and health checks.',
    expectedOutput: {
      code: 'Kubernetes manifests',
      features: ['Deployment', 'Service', 'Ingress', 'ConfigMap', 'Resources'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.2,
      completeness: 0.25,
      efficiency: 0.15,
      maintainability: 0.1,
    },
    metadata: {
      language: 'YAML',
      framework: 'Kubernetes',
      difficulty: 'hard',
      estimatedTime: 420,
      tags: ['kubernetes', 'orchestration', 'deployment'],
    },
  },
  {
    category: 'devops',
    taskType: 'Monitoring Setup',
    taskDescription: 'Set up application monitoring using Prometheus and Grafana. Include custom metrics, alerting rules, and dashboards for key performance indicators.',
    expectedOutput: {
      code: 'Monitoring configuration',
      features: ['Metrics collection', 'Dashboards', 'Alerts', 'Custom metrics'],
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.2,
      completeness: 0.25,
      efficiency: 0.15,
      maintainability: 0.15,
    },
    metadata: {
      language: 'YAML',
      framework: 'Prometheus/Grafana',
      difficulty: 'hard',
      estimatedTime: 480,
      tags: ['monitoring', 'observability', 'metrics'],
    },
  },
  {
    category: 'devops',
    taskType: 'Backup Script',
    taskDescription: 'Write a bash script that backs up a PostgreSQL database, compresses the backup, uploads it to S3, and cleans up old backups. Include error handling and logging.',
    expectedOutput: {
      code: 'Backup bash script',
      features: ['Database backup', 'Compression', 'S3 upload', 'Cleanup', 'Logging'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.2,
      completeness: 0.25,
      efficiency: 0.15,
      maintainability: 0.1,
    },
    metadata: {
      language: 'Bash',
      framework: 'Shell',
      difficulty: 'medium',
      estimatedTime: 300,
      tags: ['backup', 'database', 'automation'],
    },
  },
  {
    category: 'devops',
    taskType: 'Log Aggregation',
    taskDescription: 'Set up centralized logging using ELK stack (Elasticsearch, Logstash, Kibana). Configure log collection from multiple services and create useful dashboards.',
    expectedOutput: {
      code: 'ELK configuration',
      features: ['Log collection', 'Parsing', 'Indexing', 'Dashboards'],
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.2,
      completeness: 0.25,
      efficiency: 0.15,
      maintainability: 0.15,
    },
    metadata: {
      language: 'YAML/Config',
      framework: 'ELK Stack',
      difficulty: 'hard',
      estimatedTime: 480,
      tags: ['logging', 'elk', 'observability'],
    },
  },
  {
    category: 'devops',
    taskType: 'Infrastructure as Code',
    taskDescription: 'Write Terraform configuration to provision AWS infrastructure including VPC, subnets, EC2 instances, RDS database, and S3 buckets. Include proper security groups.',
    expectedOutput: {
      code: 'Terraform configuration',
      features: ['VPC setup', 'Compute', 'Database', 'Storage', 'Security'],
    },
    evaluationCriteria: {
      accuracy: 0.3,
      codeQuality: 0.2,
      completeness: 0.25,
      efficiency: 0.15,
      maintainability: 0.1,
    },
    metadata: {
      language: 'HCL',
      framework: 'Terraform',
      difficulty: 'hard',
      estimatedTime: 480,
      tags: ['iac', 'terraform', 'aws'],
    },
  },
  {
    category: 'devops',
    taskType: 'Security Hardening',
    taskDescription: 'Create a security hardening checklist and implementation for a Linux server including firewall rules, SSH configuration, fail2ban setup, and automatic security updates.',
    expectedOutput: {
      code: 'Security configuration scripts',
      features: ['Firewall', 'SSH hardening', 'Fail2ban', 'Auto-updates'],
    },
    evaluationCriteria: {
      accuracy: 0.25,
      codeQuality: 0.2,
      completeness: 0.25,
      efficiency: 0.1,
      maintainability: 0.1,
      security: 0.1,
    },
    metadata: {
      language: 'Bash/Config',
      framework: 'Linux',
      difficulty: 'medium',
      estimatedTime: 360,
      tags: ['security', 'hardening', 'linux'],
    },
  },
];

export const ALL_SUITES = [...BACKEND_SUITE, ...FRONTEND_SUITE, ...DEVOPS_SUITE];
